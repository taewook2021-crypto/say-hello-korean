import React, { useState } from "react";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { toast } from "sonner";
import { supabase } from "@/integrations/supabase/client";
import { Loader2, Sparkles, Camera } from "lucide-react";
import OCRCamera from "@/components/OCRCamera";

interface StudyData {
  id: string;
  subject: string;
  textbook: string;
  maxRounds: number;
  chapters: Chapter[];
  createdAt: Date;
}

interface Chapter {
  order: number;
  name: string;
  problems: Problem[];
}

interface Problem {
  number: number;
  rounds: { [roundNumber: number]: '‚≠ï' | 'üî∫' | '‚ùå' | null };
  hasNote: boolean;
}

interface WrongNote {
  id: string;
  subject: string;
  textbook: string;
  chapter: string;
  problemNumber: number;
  status: 'üî∫' | '‚ùå';
  content: {
    problemText: string;
    answer: string;
  };
  createdAt: Date;
}

interface CreateWrongNoteDialogProps {
  isOpen: boolean;
  onClose: () => void;
  studyData: StudyData;
  chapterOrder: number;
  problemNumber: number;
  status: 'üî∫' | '‚ùå';
  onNoteCreated: () => void;
}

export function CreateWrongNoteDialog({
  isOpen,
  onClose,
  studyData,
  chapterOrder,
  problemNumber,
  status,
  onNoteCreated
}: CreateWrongNoteDialogProps) {
  const [problemText, setProblemText] = useState("");
  const [answer, setAnswer] = useState("");
  const [isGeneratingAnswer, setIsGeneratingAnswer] = useState(false);
  const [showOCR, setShowOCR] = useState(false);

  const chapter = studyData.chapters.find(ch => ch.order === chapterOrder);
  const chapterName = chapter?.name || "";

  const handleOCRResult = (text: string) => {
    setProblemText(prev => prev + text);
    setShowOCR(false);
  };

  const generateAnswerWithGPT = async () => {
    if (!problemText.trim()) {
      toast.error("Î¨∏Ï†úÎ•º Î®ºÏ†Ä ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }

    setIsGeneratingAnswer(true);
    try {
      const { data, error } = await supabase.functions.invoke('chat-with-gpt', {
        body: {
          message: `Îã§Ïùå Î¨∏Ï†úÏóê ÎåÄÌïú Ìï¥ÏÑ§ÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî:\n\n${problemText}`,
          messages: [], // Îπà Î∞∞Ïó¥Î°ú Ï¥àÍ∏∞Ìôî
          model: 'gpt-4o-mini',
          currentSubject: studyData.subject
        }
      });

      if (error) {
        console.error('GPT API Ïò§Î•ò:', error);
        toast.error("Ìï¥ÏÑ§ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
        return;
      }

      if (data?.response) {
        setAnswer(data.response);
        toast.success("GPTÍ∞Ä Ìï¥ÏÑ§ÏùÑ ÏÉùÏÑ±ÌñàÏäµÎãàÎã§!");
      } else {
        toast.error("Ìï¥ÏÑ§ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }
    } catch (error) {
      console.error('GPT ÏöîÏ≤≠ Ïò§Î•ò:', error);
      toast.error("Ìï¥ÏÑ§ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
    } finally {
      setIsGeneratingAnswer(false);
    }
  };

  const handleSave = async () => {
    if (!problemText.trim()) {
      toast.error("Î¨∏Ï†ú ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }

    if (!answer.trim()) {
      toast.error("Ï†ïÎãµÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }

    try {
      // ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
      const { data: { user } } = await supabase.auth.getUser();
      
      // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ïò§ÎãµÎÖ∏Ìä∏ Ï†ÄÏû•
      const { error: dbError } = await supabase
        .from('wrong_notes')
        .insert({
          question: problemText.trim(),
          explanation: answer.trim(),
          subject_name: studyData.subject,
          book_name: studyData.textbook,
          chapter_name: chapterName,
          source_text: `${chapterName} ${problemNumber}Î≤à`,
          user_id: user?.id
        });

      if (dbError) {
        console.error('Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû• Ïò§Î•ò:', dbError);
        toast.error("Ïò§ÎãµÎÖ∏Ìä∏ Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
        return;
      }

      // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÎèÑ Ï†ÄÏû• (Í∏∞Ï°¥ Í∏∞Îä• Ïú†ÏßÄ)
      const wrongNote: WrongNote = {
        id: Date.now().toString(),
        subject: studyData.subject,
        textbook: studyData.textbook,
        chapter: chapterName,
        problemNumber,
        status,
        content: {
          problemText: problemText.trim(),
          answer: answer.trim()
        },
        createdAt: new Date()
      };

      const existingNotes = localStorage.getItem('aro-wrong-notes');
      const notes = existingNotes ? JSON.parse(existingNotes) : [];
      notes.push(wrongNote);
      localStorage.setItem('aro-wrong-notes', JSON.stringify(notes));

      toast.success("Ïò§ÎãµÎÖ∏Ìä∏Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!");
      
      // Ìèº Ï¥àÍ∏∞Ìôî
      setProblemText("");
      setAnswer("");
      
      onNoteCreated();
    } catch (error) {
      console.error('Ïò§ÎãµÎÖ∏Ìä∏ Ï†ÄÏû• Ïò§Î•ò:', error);
      toast.error("Ïò§ÎãµÎÖ∏Ìä∏ Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
    }
  };

  const handleCancel = () => {
    // Ìèº Ï¥àÍ∏∞Ìôî
    setProblemText("");
    setAnswer("");
    setShowOCR(false);
    onClose();
  };

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <span className="text-lg">{status}</span>
              Ïò§ÎãµÎÖ∏Ìä∏ ÏûëÏÑ±
            </DialogTitle>
            <DialogDescription>
              {studyData.subject} &gt; {studyData.textbook} &gt; {chapterName} &gt; {problemNumber}Î≤à Î¨∏Ï†ú
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            {/* Î¨∏Ï†ú ÎÇ¥Ïö© */}
            <div>
              <div className="flex items-center justify-between">
                <Label htmlFor="problemText">Î¨∏Ï†ú *</Label>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => setShowOCR(true)}
                  className="flex items-center gap-2"
                >
                  <Camera className="w-4 h-4" />
                  Ïπ¥Î©îÎùºÎ°ú ÏûÖÎ†•
                </Button>
              </div>
              <Textarea
                id="problemText"
                value={problemText}
                onChange={(e) => setProblemText(e.target.value)}
                placeholder="Î¨∏Ï†úÎ•º ÏûÖÎ†•ÌïòÍ±∞ÎÇò ÏÑ§Î™ÖÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî..."
                className="min-h-24 mt-2"
              />
            </div>

            {/* Ï†ïÎãµ */}
            <div>
              <div className="flex items-center justify-between">
                <Label htmlFor="answer">Ï†ïÎãµ *</Label>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={generateAnswerWithGPT}
                  disabled={isGeneratingAnswer || !problemText.trim()}
                  className="flex items-center gap-2"
                >
                  {isGeneratingAnswer ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      ÏÉùÏÑ± Ï§ë...
                    </>
                  ) : (
                    <>
                      <Sparkles className="w-4 h-4" />
                      GPT Ìï¥ÏÑ§ ÏÉùÏÑ±
                    </>
                  )}
                </Button>
              </div>
              <Textarea
                id="answer"
                value={answer}
                onChange={(e) => setAnswer(e.target.value)}
                placeholder="Ï†ïÎãµÍ≥º ÌíÄÏù¥ Í≥ºÏ†ïÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî..."
                className="min-h-24 mt-2"
              />
            </div>

            {/* Î≤ÑÌäº */}
            <div className="flex justify-end gap-2 pt-4">
              <Button variant="outline" onClick={handleCancel}>
                Ï∑®ÏÜå
              </Button>
              <Button onClick={handleSave}>
                Ï†ÄÏû•ÌïòÍ∏∞
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* OCR Camera Modal */}
      <OCRCamera
        isOpen={showOCR}
        onClose={() => setShowOCR(false)}
        onTextExtracted={handleOCRResult}
      />
    </>
  );
}