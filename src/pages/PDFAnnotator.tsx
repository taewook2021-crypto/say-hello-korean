import React, { useState, useRef, useEffect, useCallback } from "react";
import { Upload, Pen, Highlighter, Eraser, RotateCcw, ZoomIn, ZoomOut, ChevronLeft, ChevronRight } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Slider } from "@/components/ui/slider";
import { toast } from "sonner";
import { Canvas as FabricCanvas, PencilBrush } from 'fabric';
import * as pdfjsLib from 'pdfjs-dist';

// PDF.js ÏõåÏª§ ÎπÑÌôúÏÑ±Ìôî - Î©îÏù∏ Ïä§Î†àÎìúÏóêÏÑú Ïã§Ìñâ (Í∞ÄÏû• ÏïàÏ†ïÏ†Å)
pdfjsLib.GlobalWorkerOptions.workerSrc = '';
console.log('PDF.js ÏõåÏª§ ÎπÑÌôúÏÑ±ÌôîÎê® - Î©îÏù∏ Ïä§Î†àÎìúÏóêÏÑú Ïã§Ìñâ');

const PDFAnnotator = () => {
  const [pdfFile, setPdfFile] = useState<File | null>(null);
  const [pdfDocument, setPdfDocument] = useState<pdfjsLib.PDFDocumentProxy | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(0);
  const [scale, setScale] = useState(1.5);
  const [fabricCanvas, setFabricCanvas] = useState<FabricCanvas | null>(null);
  const [currentTool, setCurrentTool] = useState<'pen' | 'highlighter' | 'eraser'>('pen');
  const [brushSize, setBrushSize] = useState([5]);
  const [brushColor, setBrushColor] = useState('#000000');
  const [isDragging, setIsDragging] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  
  const fileInputRef = useRef<HTMLInputElement>(null);
  const pdfCanvasRef = useRef<HTMLCanvasElement>(null);
  const annotationCanvasRef = useRef<HTMLCanvasElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);
  const renderTaskRef = useRef<pdfjsLib.RenderTask | null>(null);
  const rafRef = useRef<number | null>(null);

  const colors = [
    '#000000', '#FF0000', '#00FF00', '#0000FF', 
    '#FFFF00', '#FF00FF', '#00FFFF', '#FFA500'
  ];

  const highlighterColors = [
    '#FFFF00', '#FF0000', '#00FF00', '#0000FF',
    '#FFA500', '#FF00FF', '#00FFFF'
  ];

  // PDF ÌååÏùº Î°úÎìú
  const loadPDF = useCallback(async (file: File) => {
    setIsLoading(true);
    console.log('PDF Î°úÎìú ÏãúÏûë:', file.name);
    
    try {
      // Blob URLÎ°ú Ï¶âÏãú Î°úÎìú ÏãúÏûë (Ï¥àÍ∏∞ ÎåÄÍ∏∞ÏãúÍ∞Ñ Í∞êÏÜå)
      const blobUrl = URL.createObjectURL(file);
      const loadingTask = pdfjsLib.getDocument({
        url: blobUrl,
        verbosity: 0,
      });
      
      // ÏßÑÌñâÎ•† ÌëúÏãú
      loadingTask.onProgress = (p: { loaded: number; total?: number }) => {
        const pct = p.total ? Math.round((p.loaded / p.total) * 100) : Math.min(99, Math.round(p.loaded / 1000000));
        toast.dismiss('pdf-progress');
        toast.loading(`PDF Î°úÎî© Ï§ë‚Ä¶ ${pct}%`, { id: 'pdf-progress' });
      };
      
      console.log('PDF Î¨∏ÏÑú Î°úÎî© ÏûëÏóÖ ÏÉùÏÑ±Îê®');
      const pdf = await loadingTask.promise;
      console.log('PDF Î°úÎìú ÏÑ±Í≥µ! ÌéòÏù¥ÏßÄ Ïàò:', pdf.numPages);
      
      setPdfDocument(pdf);
      setTotalPages(pdf.numPages);
      setCurrentPage(1);
      setPdfFile(file);
      
      // Blob URL Ï†ïÎ¶¨
      setTimeout(() => URL.revokeObjectURL(blobUrl), 60_000);
      toast.dismiss('pdf-progress');
      toast.success(`PDF Î°úÎìú ÏôÑÎ£å! Ï¥ù ${pdf.numPages}ÌéòÏù¥ÏßÄ üéâ`);
    } catch (error) {
      console.error('PDF Î°úÎìú Ïã§Ìå®:', error);
      toast.dismiss('pdf-progress');
      toast.error('PDF ÌååÏùºÏùÑ Î°úÎìúÌï† Ïàò ÏóÜÏäµÎãàÎã§. Îã§Î•∏ ÌååÏùºÏùÑ ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî.');
    } finally {
      setIsLoading(false);
    }
  }, []);

  // PDF ÌéòÏù¥ÏßÄ Î†åÎçîÎßÅ
  const renderPage = useCallback(async (pageNumber: number) => {
    if (!pdfDocument || !pdfCanvasRef.current) return;

    try {
      console.log(`ÌéòÏù¥ÏßÄ ${pageNumber} Î†åÎçîÎßÅ ÏãúÏûë`);
      
      // Ïù¥Ï†Ñ Î†åÎçî/RAF Ï∑®ÏÜå
      if (renderTaskRef.current) {
        try { renderTaskRef.current.cancel(); } catch {}
        renderTaskRef.current = null;
      }
      if (rafRef.current) cancelAnimationFrame(rafRef.current);

      const page = await pdfDocument.getPage(pageNumber);
      const viewport = page.getViewport({ scale });
      
      const canvas = pdfCanvasRef.current;
      const context = canvas.getContext('2d');
      
      if (!context) return;

      canvas.width = viewport.width;
      canvas.height = viewport.height;
      canvas.style.width = viewport.width + 'px';
      canvas.style.height = viewport.height + 'px';

      const render = () => {
        const renderContext = { canvasContext: context, viewport, canvas };
        const task = page.render(renderContext);
        renderTaskRef.current = task;
        task.promise.finally(() => { renderTaskRef.current = null; });
      };
      
      // Î¶¨ÌîåÎ°úÏö∞ ÏßÅÌõÑ ÌîÑÎ†àÏûÑÏóê Î†åÎçî ‚Üí ÎÅäÍπÄ Í∞êÏÜå
      rafRef.current = requestAnimationFrame(render);
      console.log(`ÌéòÏù¥ÏßÄ ${pageNumber} Î†åÎçîÎßÅ ÏôÑÎ£å`);
      
      // Fabric.js Ï∫îÎ≤ÑÏä§ ÌÅ¨Í∏∞ÎèÑ ÎßûÏ∂§
      if (fabricCanvas && annotationCanvasRef.current) {
        annotationCanvasRef.current.width = viewport.width;
        annotationCanvasRef.current.height = viewport.height;
        annotationCanvasRef.current.style.width = viewport.width + 'px';
        annotationCanvasRef.current.style.height = viewport.height + 'px';
        
        fabricCanvas.setDimensions({ 
          width: viewport.width, 
          height: viewport.height 
        });
        fabricCanvas.renderAll();
      }
    } catch (error) {
      console.error('ÌéòÏù¥ÏßÄ Î†åÎçîÎßÅ Ïã§Ìå®:', error);
      toast.error('ÌéòÏù¥ÏßÄÎ•º Î†åÎçîÎßÅÌï† Ïàò ÏóÜÏäµÎãàÎã§.');
    }
  }, [pdfDocument, scale, fabricCanvas]);

  // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Î≥ÄÍ≤ΩÏãú Î†åÎçîÎßÅ
  useEffect(() => {
    if (pdfDocument) {
      renderPage(currentPage);
    }
  }, [pdfDocument, currentPage, scale, renderPage]);

  // Fabric.js Ï∫îÎ≤ÑÏä§ Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    if (!annotationCanvasRef.current || !pdfDocument) return;

    console.log('Fabric Ï∫îÎ≤ÑÏä§ Ï¥àÍ∏∞Ìôî');
    const canvas = new FabricCanvas(annotationCanvasRef.current, {
      isDrawingMode: true,
      selection: false,
      backgroundColor: 'transparent'
    });

    // Î∏åÎü¨Ïãú ÏÑ§Ï†ï
    const brush = new PencilBrush(canvas);
    brush.width = brushSize[0];
    brush.color = brushColor;
    canvas.freeDrawingBrush = brush;

    // ÌÑ∞Ïπò Ïù¥Î≤§Ìä∏ ÏÑ§Ï†ï
    const canvasElement = canvas.getElement();
    canvasElement.style.touchAction = 'none';

    canvas.on('path:created', () => {
      console.log('ÌïÑÍ∏∞ ÏôÑÎ£å');
      toast.success('ÌïÑÍ∏∞ ÏôÑÎ£å!');
    });

    setFabricCanvas(canvas);

    return () => {
      canvas.dispose();
    };
  }, [pdfDocument]);

  // Î∏åÎü¨Ïãú ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    if (!fabricCanvas) return;

    const brush = fabricCanvas.freeDrawingBrush;
    if (brush) {
      const finalWidth = currentTool === 'highlighter' ? brushSize[0] * 2 : brushSize[0];
      const finalColor = brushColor;
      
      brush.width = finalWidth;
      brush.color = finalColor;
      
      // ÌïòÏù¥ÎùºÏù¥ÌÑ∞ Î™®Îìú: multiply Î∏îÎ†åÎî©ÏúºÎ°ú ÏûêÏó∞Ïä§Îü¨Ïö¥ Í≤πÏπ®
      // @ts-ignore fabric ÌÉÄÏûÖÏóî ÏóÜÏßÄÎßå Îü∞ÌÉÄÏûÑ Î∞òÏòÅÎê®
      fabricCanvas.contextTop.globalCompositeOperation = currentTool === 'highlighter' ? 'multiply' : 'source-over';
    }

    fabricCanvas.isDrawingMode = currentTool !== 'eraser';

    // ÏßÄÏö∞Í∞ú Î™®Îìú
    if (currentTool === 'eraser') {
      fabricCanvas.off('mouse:down');
      fabricCanvas.on('mouse:down', (e) => {
        if (e.target) {
          fabricCanvas.remove(e.target);
          fabricCanvas.renderAll();
          console.log('Í∞ùÏ≤¥ ÏÇ≠Ï†úÎê®');
        }
      });
    } else {
      fabricCanvas.off('mouse:down');
    }
  }, [currentTool, brushSize, brushColor, fabricCanvas]);

  const handleFileUpload = (file: File) => {
    if (file.type !== 'application/pdf') {
      toast.error('PDF ÌååÏùºÎßå ÏóÖÎ°úÎìú Í∞ÄÎä•Ìï©ÎãàÎã§.');
      return;
    }
    loadPDF(file);
  };

  const handleToolChange = (tool: 'pen' | 'highlighter' | 'eraser') => {
    setCurrentTool(tool);
    
    if (tool === 'highlighter') {
      setBrushColor('#FFFF00');
    } else if (tool === 'pen') {
      setBrushColor('#000000');
    }
  };

  const clearAnnotations = () => {
    if (fabricCanvas) {
      fabricCanvas.clear();
      fabricCanvas.renderAll();
      toast.success('ÌïÑÍ∏∞Í∞Ä ÏßÄÏõåÏ°åÏäµÎãàÎã§.');
    }
  };

  const goToPage = (pageNumber: number) => {
    if (pageNumber >= 1 && pageNumber <= totalPages) {
      setCurrentPage(pageNumber);
    }
  };

  const zoomIn = () => {
    setScale(prev => Math.min(prev + 0.25, 3));
  };

  const zoomOut = () => {
    setScale(prev => Math.max(prev - 0.25, 0.5));
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      handleFileUpload(files[0]);
    }
  };

  return (
    <div className="flex flex-col h-screen bg-background">
      {/* ÏÉÅÎã® Ìà¥Î∞î */}
      <div className="border-b border-border p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <h1 className="text-xl font-bold">PDF ÌïÑÍ∏∞ üìù</h1>
            {pdfDocument && (
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => goToPage(currentPage - 1)}
                  disabled={currentPage <= 1}
                >
                  <ChevronLeft className="h-4 w-4" />
                </Button>
                <span className="text-sm min-w-0 px-2 py-1 bg-muted rounded">
                  {currentPage} / {totalPages}
                </span>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => goToPage(currentPage + 1)}
                  disabled={currentPage >= totalPages}
                >
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </div>
            )}
          </div>
          
          {pdfDocument && (
            <div className="flex items-center gap-2">
              <Button variant="outline" size="sm" onClick={zoomOut}>
                <ZoomOut className="h-4 w-4" />
              </Button>
              <span className="text-sm min-w-0 px-2 py-1 bg-muted rounded">
                {Math.round(scale * 100)}%
              </span>
              <Button variant="outline" size="sm" onClick={zoomIn}>
                <ZoomIn className="h-4 w-4" />
              </Button>
            </div>
          )}
        </div>
      </div>

      {/* Î©îÏù∏ ÏòÅÏó≠ */}
      <div className="flex-1 flex overflow-hidden">
        {/* Ï¢åÏ∏° Ìà¥Î∞î */}
        {pdfDocument && (
          <div className="w-80 border-r border-border p-6 space-y-6 bg-background overflow-y-auto">
            <h2 className="text-xl font-bold">ÌïÑÍ∏∞ ÎèÑÍµ¨</h2>
            
            {/* ÎèÑÍµ¨ ÏÑ†ÌÉù */}
            <Card className="p-4">
              <h3 className="font-medium mb-4">ÎèÑÍµ¨</h3>
              <div className="space-y-3">
                <Button
                  variant={currentTool === 'pen' ? 'default' : 'outline'}
                  onClick={() => handleToolChange('pen')}
                  className="w-full justify-start"
                >
                  <Pen className="w-4 h-4 mr-2" />
                  Ìéú
                </Button>
                <Button
                  variant={currentTool === 'highlighter' ? 'default' : 'outline'}
                  onClick={() => handleToolChange('highlighter')}
                  className="w-full justify-start"
                >
                  <Highlighter className="w-4 h-4 mr-2" />
                  ÌòïÍ¥ëÌéú
                </Button>
                <Button
                  variant={currentTool === 'eraser' ? 'default' : 'outline'}
                  onClick={() => handleToolChange('eraser')}
                  className="w-full justify-start"
                >
                  <Eraser className="w-4 h-4 mr-2" />
                  ÏßÄÏö∞Í∞ú
                </Button>
              </div>
            </Card>

            {/* Î∏åÎü¨Ïãú ÌÅ¨Í∏∞ */}
            <Card className="p-4">
              <h3 className="font-medium mb-4">Î∏åÎü¨Ïãú ÌÅ¨Í∏∞: {brushSize[0]}px</h3>
              <Slider
                value={brushSize}
                onValueChange={setBrushSize}
                max={50}
                min={1}
                step={1}
              />
            </Card>

            {/* ÏÉâÏÉÅ ÏÑ†ÌÉù */}
            <Card className="p-4">
              <h3 className="font-medium mb-4">
                {currentTool === 'highlighter' ? 'ÌòïÍ¥ëÌéú ÏÉâÏÉÅ' : 'Ìéú ÏÉâÏÉÅ'}
              </h3>
              <div className="grid grid-cols-4 gap-3">
                {(currentTool === 'highlighter' ? highlighterColors : colors).map((color) => (
                  <button
                    key={color}
                    className={`w-10 h-10 rounded-full border-2 transition-all hover:scale-110 ${
                      brushColor === color
                        ? 'border-foreground scale-110 shadow-lg'
                        : 'border-muted hover:border-foreground/50'
                    }`}
                    style={{ backgroundColor: color }}
                    onClick={() => setBrushColor(color)}
                    title={`ÏÉâÏÉÅ: ${color}`}
                  />
                ))}
              </div>
            </Card>

            {/* Ï†ÑÏ≤¥ ÏßÄÏö∞Í∏∞ */}
            <Card className="p-4">
              <Button
                onClick={clearAnnotations}
                className="w-full"
                variant="outline"
                disabled={!fabricCanvas}
              >
                <RotateCcw className="w-4 h-4 mr-2" />
                ÌïÑÍ∏∞ ÏßÄÏö∞Í∏∞
              </Button>
            </Card>
          </div>
        )}

        {/* PDF Î∞è Ï£ºÏÑù ÏòÅÏó≠ */}
        <div className="flex-1 overflow-auto p-4 bg-gray-100">
          {!pdfDocument ? (
            // PDF ÏóÖÎ°úÎìú ÎåÄÍ∏∞ ÌôîÎ©¥
            <div
              className={`h-full flex flex-col items-center justify-center border-2 border-dashed transition-colors ${
                isDragging ? 'border-primary bg-primary/10' : 'border-muted'
              }`}
              onDragOver={handleDragOver}
              onDragLeave={handleDragLeave}
              onDrop={handleDrop}
            >
              <div className="text-center max-w-md">
                <Upload className="w-16 h-16 mx-auto mb-4 text-muted-foreground" />
                <h3 className="text-lg font-medium mb-2">PDF ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌïòÏÑ∏Ïöî</h3>
                <p className="text-muted-foreground mb-4">
                  ÌååÏùºÏùÑ ÎìúÎûòÍ∑∏ÌïòÏó¨ ÎÜìÍ±∞ÎÇò ÏïÑÎûò Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî
                </p>
                <Button
                  onClick={() => fileInputRef.current?.click()}
                  variant="outline"
                  size="lg"
                  disabled={isLoading}
                >
                  <Upload className="w-4 h-4 mr-2" />
                  {isLoading ? 'Î°úÎî© Ï§ë...' : 'ÌååÏùº ÏÑ†ÌÉù'}
                </Button>
                <input
                  ref={fileInputRef}
                  type="file"
                  accept=".pdf,application/pdf"
                  onChange={(e) => {
                    const file = e.target.files?.[0];
                    if (file) {
                      handleFileUpload(file);
                    }
                  }}
                  className="hidden"
                />
              </div>
            </div>
          ) : (
            // PDF Î∞è Ï£ºÏÑù Ï∫îÎ≤ÑÏä§
            <div className="flex justify-center">
              <div className="relative inline-block shadow-lg bg-white">
                {/* PDF Ï∫îÎ≤ÑÏä§ (Î∞∞Í≤Ω) */}
                <canvas
                  ref={pdfCanvasRef}
                  className="block border border-gray-300"
                  style={{ maxWidth: '100%' }}
                />
                
                {/* Ï£ºÏÑù Ï∫îÎ≤ÑÏä§ (Ïò§Î≤ÑÎ†àÏù¥) */}
                <canvas
                  ref={annotationCanvasRef}
                  className="absolute top-0 left-0"
                  style={{
                    cursor: currentTool === 'pen' ? 'crosshair' : 
                             currentTool === 'highlighter' ? 'cell' : 'grab'
                  }}
                />
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default PDFAnnotator;